import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as n,b as e}from"./app-CFiaopWh.js";const a={},p=e("h1",{id:"js数字精度丢失问题",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#js数字精度丢失问题"},[e("span",null,"JS数字精度丢失问题")])],-1),r=e("p",null,"JS中的数字是以科学计数法的形式存储64位双精度浮点数编码。",-1),c=e("p",null,"其中第1位为符号位，0表示正数，1表示负数；中间11位为指数位；最后52位为尾数位，会舍0进1。",-1),i=e("p",null,"在计算时会将十进制数转换成二进制，计算完成后再转换成十进制数，并且由于小数位数无限但二进制位数有限，因此引起计算误差，造成数字精度丢失。",-1),s=e("p",null,"解决方法是将小数转换成整数在计算，或是使用第三方库Math.js或BigDecimal.js。",-1),l=[p,r,c,i,s];function d(m,_){return n(),o("div",null,l)}const E=t(a,[["render",d],["__file","JS数字精度丢失问题.html.vue"]]),g=JSON.parse(`{"path":"/dump/knowledge/JS%E6%95%B0%E5%AD%97%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98.html","title":"JS数字精度丢失问题","lang":"zh-CN","frontmatter":{"description":"JS数字精度丢失问题 JS中的数字是以科学计数法的形式存储64位双精度浮点数编码。 其中第1位为符号位，0表示正数，1表示负数；中间11位为指数位；最后52位为尾数位，会舍0进1。 在计算时会将十进制数转换成二进制，计算完成后再转换成十进制数，并且由于小数位数无限但二进制位数有限，因此引起计算误差，造成数字精度丢失。 解决方法是将小数转换成整数在计算，...","head":[["meta",{"property":"og:url","content":"https://guoxicheng.top/dump/knowledge/JS%E6%95%B0%E5%AD%97%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"Guo's Page"}],["meta",{"property":"og:title","content":"JS数字精度丢失问题"}],["meta",{"property":"og:description","content":"JS数字精度丢失问题 JS中的数字是以科学计数法的形式存储64位双精度浮点数编码。 其中第1位为符号位，0表示正数，1表示负数；中间11位为指数位；最后52位为尾数位，会舍0进1。 在计算时会将十进制数转换成二进制，计算完成后再转换成十进制数，并且由于小数位数无限但二进制位数有限，因此引起计算误差，造成数字精度丢失。 解决方法是将小数转换成整数在计算，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-13T07:17:20.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-13T07:17:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JS数字精度丢失问题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-13T07:17:20.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1697638485000,"updatedTime":1718263040000},"readingTime":{"minutes":0.55,"words":166},"filePathRelative":"dump/knowledge/JS数字精度丢失问题.md","localizedDate":"2023年10月18日","autoDesc":true,"excerpt":"\\n<p>JS中的数字是以科学计数法的形式存储64位双精度浮点数编码。</p>\\n<p>其中第1位为符号位，0表示正数，1表示负数；中间11位为指数位；最后52位为尾数位，会舍0进1。</p>\\n<p>在计算时会将十进制数转换成二进制，计算完成后再转换成十进制数，并且由于小数位数无限但二进制位数有限，因此引起计算误差，造成数字精度丢失。</p>\\n<p>解决方法是将小数转换成整数在计算，或是使用第三方库Math.js或BigDecimal.js。</p>\\n"}`);export{E as comp,g as data};
