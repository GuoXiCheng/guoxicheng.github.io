import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as n,b as e}from"./app-CFiaopWh.js";const p={},a=e("h1",{id:"闭包",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#闭包"},[e("span",null,"闭包")])],-1),r=e("p",null,"闭包是一个函数。",-1),c=e("p",null,"闭包可以让内层函数记住并访问外层函数的作用域，即使外层函数已经销毁。",-1),i=e("p",null,"闭包的一个使用场景是：封装私有变量。",-1),s=e("p",null,"在原生JS中没有私有变量的概念，可以使用闭包实现类似的效果。例如在函数内部定义变量，并返回一组内部函数，用于访问和操作内部变量，而函数外部不可直接访问这些内部变量。",-1),l=e("p",null,"另一个使用场景是：延长变量的生命周期，例如[[函数柯里化]]",-1),d=[a,r,c,i,s,l];function m(_,h){return n(),o("div",null,d)}const f=t(p,[["render",m],["__file","闭包.html.vue"]]),y=JSON.parse(`{"path":"/dump/knowledge/%E9%97%AD%E5%8C%85.html","title":"闭包","lang":"zh-CN","frontmatter":{"description":"闭包 闭包是一个函数。 闭包可以让内层函数记住并访问外层函数的作用域，即使外层函数已经销毁。 闭包的一个使用场景是：封装私有变量。 在原生JS中没有私有变量的概念，可以使用闭包实现类似的效果。例如在函数内部定义变量，并返回一组内部函数，用于访问和操作内部变量，而函数外部不可直接访问这些内部变量。 另一个使用场景是：延长变量的生命周期，例如[[函数柯里化]]","head":[["meta",{"property":"og:url","content":"https://guoxicheng.top/dump/knowledge/%E9%97%AD%E5%8C%85.html"}],["meta",{"property":"og:site_name","content":"Guo's Page"}],["meta",{"property":"og:title","content":"闭包"}],["meta",{"property":"og:description","content":"闭包 闭包是一个函数。 闭包可以让内层函数记住并访问外层函数的作用域，即使外层函数已经销毁。 闭包的一个使用场景是：封装私有变量。 在原生JS中没有私有变量的概念，可以使用闭包实现类似的效果。例如在函数内部定义变量，并返回一组内部函数，用于访问和操作内部变量，而函数外部不可直接访问这些内部变量。 另一个使用场景是：延长变量的生命周期，例如[[函数柯里化]]"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-13T07:17:20.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-13T07:17:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"闭包\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-13T07:17:20.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1697638485000,"updatedTime":1718263040000},"readingTime":{"minutes":0.52,"words":156},"filePathRelative":"dump/knowledge/闭包.md","localizedDate":"2023年10月18日","autoDesc":true,"excerpt":"\\n<p>闭包是一个函数。</p>\\n<p>闭包可以让内层函数记住并访问外层函数的作用域，即使外层函数已经销毁。</p>\\n<p>闭包的一个使用场景是：封装私有变量。</p>\\n<p>在原生JS中没有私有变量的概念，可以使用闭包实现类似的效果。例如在函数内部定义变量，并返回一组内部函数，用于访问和操作内部变量，而函数外部不可直接访问这些内部变量。</p>\\n<p>另一个使用场景是：延长变量的生命周期，例如[[函数柯里化]]</p>\\n"}`);export{f as comp,y as data};
