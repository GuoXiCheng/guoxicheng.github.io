import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as n,a}from"./app-D4075-pM.js";const o={},r=a('<h1 id="依赖" tabindex="-1"><a class="header-anchor" href="#依赖"><span>依赖</span></a></h1><h2 id="核心思想" tabindex="-1"><a class="header-anchor" href="#核心思想"><span>核心思想</span></a></h2><p>在12-Factor APP中，应显式声明所有依赖项，避免隐式依赖，以确保构建和运行环境的一致性。</p><h2 id="依赖清单" tabindex="-1"><a class="header-anchor" href="#依赖清单"><span>依赖清单</span></a></h2><p>通过依赖清单显式声明依赖项，例如<code>package.json</code>、<code>requirements.txt</code>等。</p><h2 id="依赖隔离" tabindex="-1"><a class="header-anchor" href="#依赖隔离"><span>依赖隔离</span></a></h2><p>通过依赖隔离确保程序不会调用系统中存在但清单中未声明的依赖，例如：<code>virtualenv</code>、<code>node_modules</code>等。</p><p>依赖清单声明必须和依赖隔离一起使用。</p><h2 id="依赖管理" tabindex="-1"><a class="header-anchor" href="#依赖管理"><span>依赖管理</span></a></h2><p>通过依赖管理工具，只需要通过一个构建命令来安装所有的依赖项，即可开始工作，例如：<code>npm install</code>、<code>pip install</code>等。</p>',10),c=[r];function d(i,p){return n(),t("div",null,c)}const h=e(o,[["render",d],["__file","002-dependencies.html.vue"]]),m=JSON.parse(`{"path":"/dump/software-engineering/twelve-factor/002-dependencies.html","title":"依赖","lang":"zh-CN","frontmatter":{"date":"2024-03-06T00:00:00.000Z","description":"依赖 核心思想 在12-Factor APP中，应显式声明所有依赖项，避免隐式依赖，以确保构建和运行环境的一致性。 依赖清单 通过依赖清单显式声明依赖项，例如package.json、requirements.txt等。 依赖隔离 通过依赖隔离确保程序不会调用系统中存在但清单中未声明的依赖，例如：virtualenv、node_modules等。 依赖...","head":[["meta",{"property":"og:url","content":"https://guoxicheng.top/dump/software-engineering/twelve-factor/002-dependencies.html"}],["meta",{"property":"og:site_name","content":"Guo's Page"}],["meta",{"property":"og:title","content":"依赖"}],["meta",{"property":"og:description","content":"依赖 核心思想 在12-Factor APP中，应显式声明所有依赖项，避免隐式依赖，以确保构建和运行环境的一致性。 依赖清单 通过依赖清单显式声明依赖项，例如package.json、requirements.txt等。 依赖隔离 通过依赖隔离确保程序不会调用系统中存在但清单中未声明的依赖，例如：virtualenv、node_modules等。 依赖..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-19T03:23:52.000Z"}],["meta",{"property":"article:published_time","content":"2024-03-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-19T03:23:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"依赖\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-06T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-19T03:23:52.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"核心思想","slug":"核心思想","link":"#核心思想","children":[]},{"level":2,"title":"依赖清单","slug":"依赖清单","link":"#依赖清单","children":[]},{"level":2,"title":"依赖隔离","slug":"依赖隔离","link":"#依赖隔离","children":[]},{"level":2,"title":"依赖管理","slug":"依赖管理","link":"#依赖管理","children":[]}],"git":{"createdTime":1709540171000,"updatedTime":1718767432000},"readingTime":{"minutes":0.56,"words":167},"filePathRelative":"dump/software-engineering/twelve-factor/002-dependencies.md","localizedDate":"2024年3月6日","autoDesc":true,"excerpt":"\\n<h2>核心思想</h2>\\n<p>在12-Factor APP中，应显式声明所有依赖项，避免隐式依赖，以确保构建和运行环境的一致性。</p>\\n<h2>依赖清单</h2>\\n<p>通过依赖清单显式声明依赖项，例如<code>package.json</code>、<code>requirements.txt</code>等。</p>\\n<h2>依赖隔离</h2>\\n<p>通过依赖隔离确保程序不会调用系统中存在但清单中未声明的依赖，例如：<code>virtualenv</code>、<code>node_modules</code>等。</p>\\n<p>依赖清单声明必须和依赖隔离一起使用。</p>\\n<h2>依赖管理</h2>"}`);export{h as comp,m as data};
