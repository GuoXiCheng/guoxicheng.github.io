import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,o,a as r}from"./app-Btbwx5wL.js";const d="/assets/image/cloud-native/docker-architecture.webp",t={},a=r('<h1 id="docker-架构" tabindex="-1"><a class="header-anchor" href="#docker-架构"><span>docker 架构</span></a></h1><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="docker-基本架构" tabindex="-1"><a class="header-anchor" href="#docker-基本架构"><span>docker 基本架构</span></a></h2><p>docker 采用了客户端-服务器架构。</p><h2 id="docker-客户端" tabindex="-1"><a class="header-anchor" href="#docker-客户端"><span>docker 客户端</span></a></h2><p>docker 客户端是用户与 docker 交互的界面。</p><p>用户可以通过执行<code>docker run</code>、<code>docker build</code>、<code>docker pull</code>等 docker 命令与 docker 服务器交互来管理容器和镜像。</p><h2 id="docker-服务器" tabindex="-1"><a class="header-anchor" href="#docker-服务器"><span>docker 服务器</span></a></h2><p>docker 服务器运行在物理机或虚拟机上，docker 服务器中的 docker daemon 是一个长时间运行的守护进程，负责构建、运行和分发 docker 容器，管理 docker 容器的生命周期。</p><p>docker 客户端和服务器可以运行在同一系统中，也可以运行在不同系统中通过 socket 或者 RESTful API 进行远程通信。</p><h2 id="docker-注册中心" tabindex="-1"><a class="header-anchor" href="#docker-注册中心"><span>docker 注册中心</span></a></h2><p>docker 注册中心是存储 docker 镜像的地方。</p><p>用户可以通过<code>docker pull</code>命令从注册中心拉取镜像，也可以通过<code>docker push</code>命令将镜像推送到注册中心。</p>',13),i=[a];function k(n,p){return o(),c("div",null,i)}const h=e(t,[["render",k],["__file","docker-architecture.html.vue"]]),u=JSON.parse(`{"path":"/dump/cloud-native/docker/docker-architecture.html","title":"docker 架构","lang":"zh-CN","frontmatter":{"date":"2024-02-28T00:00:00.000Z","order":1,"description":"docker 架构 docker 基本架构 docker 采用了客户端-服务器架构。 docker 客户端 docker 客户端是用户与 docker 交互的界面。 用户可以通过执行docker run、docker build、docker pull等 docker 命令与 docker 服务器交互来管理容器和镜像。 docker 服务器 docke...","head":[["meta",{"property":"og:url","content":"https://guoxicheng.top/dump/cloud-native/docker/docker-architecture.html"}],["meta",{"property":"og:site_name","content":"Guo's Page"}],["meta",{"property":"og:title","content":"docker 架构"}],["meta",{"property":"og:description","content":"docker 架构 docker 基本架构 docker 采用了客户端-服务器架构。 docker 客户端 docker 客户端是用户与 docker 交互的界面。 用户可以通过执行docker run、docker build、docker pull等 docker 命令与 docker 服务器交互来管理容器和镜像。 docker 服务器 docke..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://guoxicheng.top/assets/image/cloud-native/docker-architecture.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T06:52:13.000Z"}],["meta",{"property":"article:published_time","content":"2024-02-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-21T06:52:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"docker 架构\\",\\"image\\":[\\"https://guoxicheng.top/assets/image/cloud-native/docker-architecture.webp\\"],\\"datePublished\\":\\"2024-02-28T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-21T06:52:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"docker 基本架构","slug":"docker-基本架构","link":"#docker-基本架构","children":[]},{"level":2,"title":"docker 客户端","slug":"docker-客户端","link":"#docker-客户端","children":[]},{"level":2,"title":"docker 服务器","slug":"docker-服务器","link":"#docker-服务器","children":[]},{"level":2,"title":"docker 注册中心","slug":"docker-注册中心","link":"#docker-注册中心","children":[]}],"git":{"createdTime":1709132036000,"updatedTime":1718952733000},"readingTime":{"minutes":0.8,"words":241},"filePathRelative":"dump/cloud-native/docker/docker-architecture.md","localizedDate":"2024年2月28日","autoDesc":true,"excerpt":"\\n<figure><img src=\\"/assets/image/cloud-native/docker-architecture.webp\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<h2>docker 基本架构</h2>\\n<p>docker 采用了客户端-服务器架构。</p>\\n<h2>docker 客户端</h2>\\n<p>docker 客户端是用户与 docker 交互的界面。</p>\\n<p>用户可以通过执行<code>docker run</code>、<code>docker build</code>、<code>docker pull</code>等 docker 命令与 docker 服务器交互来管理容器和镜像。</p>"}`);export{h as comp,u as data};
