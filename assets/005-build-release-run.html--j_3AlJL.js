import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as a,a as n}from"./app-AYg0EWYb.js";const i="/assets/image/software-engineering/build-release-run.png",r={},s=n('<h1 id="构建-发布-运行" tabindex="-1"><a class="header-anchor" href="#构建-发布-运行"><span>构建，发布，运行</span></a></h1><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="核心思想" tabindex="-1"><a class="header-anchor" href="#核心思想"><span>核心思想</span></a></h2><p>严格分离构建、发布和运行阶段。</p><h2 id="基准代码部署的三个阶段" tabindex="-1"><a class="header-anchor" href="#基准代码部署的三个阶段"><span>基准代码部署的三个阶段</span></a></h2><h3 id="构建阶段" tabindex="-1"><a class="header-anchor" href="#构建阶段"><span>构建阶段</span></a></h3><p>将基准代码转化为可执行包，包括获取依赖项、编译成二进制文件和资源文件。</p><p>构建阶段可以相对复杂，并且需要人为触发，错误信息可以立即展现在开发人员面前，从而得到妥善处理。</p><h3 id="发布阶段" tabindex="-1"><a class="header-anchor" href="#发布阶段"><span>发布阶段</span></a></h3><p>将构建得到的结果与部署所需配置结合，形成可立即运行的版本。</p><p>每发布一个版本必须对应一个唯一的发布ID，例如使用发布时的时间戳或一个增长的数字。</p><p>发布的版本就像一本只能追加的账本，一旦发布就不可修改，任何的变动都应该产生一个新的发布版本。</p><h3 id="运行阶段" tabindex="-1"><a class="header-anchor" href="#运行阶段"><span>运行阶段</span></a></h3><p>在执行环境中启动应用程序进程，使用选定的发布版本运行。</p><p>运行阶段是可以自动进行的，如服务器重启，或是进程管理器重启了一个崩溃的进程。因此，运行阶段应该保持尽可能少的模块，这样假设半夜发生系统故障而开发人员又捉襟见肘也不会引起太大问题。</p>',15),o=[s];function p(l,c){return a(),t("div",null,o)}const g=e(r,[["render",p],["__file","005-build-release-run.html.vue"]]),u=JSON.parse(`{"path":"/dump/software-engineering/twelve-factor/005-build-release-run.html","title":"构建，发布，运行","lang":"zh-CN","frontmatter":{"description":"构建，发布，运行 核心思想 严格分离构建、发布和运行阶段。 基准代码部署的三个阶段 构建阶段 将基准代码转化为可执行包，包括获取依赖项、编译成二进制文件和资源文件。 构建阶段可以相对复杂，并且需要人为触发，错误信息可以立即展现在开发人员面前，从而得到妥善处理。 发布阶段 将构建得到的结果与部署所需配置结合，形成可立即运行的版本。 每发布一个版本必须对应...","head":[["meta",{"property":"og:url","content":"https://guoxicheng.top/dump/software-engineering/twelve-factor/005-build-release-run.html"}],["meta",{"property":"og:site_name","content":"Guo's Page"}],["meta",{"property":"og:title","content":"构建，发布，运行"}],["meta",{"property":"og:description","content":"构建，发布，运行 核心思想 严格分离构建、发布和运行阶段。 基准代码部署的三个阶段 构建阶段 将基准代码转化为可执行包，包括获取依赖项、编译成二进制文件和资源文件。 构建阶段可以相对复杂，并且需要人为触发，错误信息可以立即展现在开发人员面前，从而得到妥善处理。 发布阶段 将构建得到的结果与部署所需配置结合，形成可立即运行的版本。 每发布一个版本必须对应..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://guoxicheng.top/assets/image/software-engineering/build-release-run.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-19T03:23:52.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-19T03:23:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"构建，发布，运行\\",\\"image\\":[\\"https://guoxicheng.top/assets/image/software-engineering/build-release-run.png\\"],\\"dateModified\\":\\"2024-06-19T03:23:52.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"核心思想","slug":"核心思想","link":"#核心思想","children":[]},{"level":2,"title":"基准代码部署的三个阶段","slug":"基准代码部署的三个阶段","link":"#基准代码部署的三个阶段","children":[{"level":3,"title":"构建阶段","slug":"构建阶段","link":"#构建阶段","children":[]},{"level":3,"title":"发布阶段","slug":"发布阶段","link":"#发布阶段","children":[]},{"level":3,"title":"运行阶段","slug":"运行阶段","link":"#运行阶段","children":[]}]}],"git":{"createdTime":1709540171000,"updatedTime":1718767432000},"readingTime":{"minutes":1.14,"words":341},"filePathRelative":"dump/software-engineering/twelve-factor/005-build-release-run.md","localizedDate":"2024年3月4日","autoDesc":true,"excerpt":"\\n<figure><img src=\\"/assets/image/software-engineering/build-release-run.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<h2>核心思想</h2>\\n<p>严格分离构建、发布和运行阶段。</p>\\n<h2>基准代码部署的三个阶段</h2>\\n<h3>构建阶段</h3>\\n<p>将基准代码转化为可执行包，包括获取依赖项、编译成二进制文件和资源文件。</p>\\n<p>构建阶段可以相对复杂，并且需要人为触发，错误信息可以立即展现在开发人员面前，从而得到妥善处理。</p>"}`);export{g as comp,u as data};
